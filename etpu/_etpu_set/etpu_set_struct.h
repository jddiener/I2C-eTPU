/* This file is auto-generated by the ASH WARE ETEC Linker. */
/* It contains useful information for host-CPU side driver code */
/*    !!!   DO NOT EDIT THIS FILE   !!! */
/* Copyright (C) 2015 ASH WARE, Inc. */

#ifndef __etpu_set_struct_H
#define __etpu_set_struct_H


/* data structure (map) of all non-24-bit GLOBAL data */
/* unnamed bit-fields are used to fill any gaps in the data map */
/* bitfield access generates read-modify-write code (non-coherent), */
/* so if this is an issue, access bitfields via their unit instead. */
typedef struct
{
	/* 0x0000 */
	etpu_if_sint32				_Global_error_data;
} etpu_if_GLOBAL_DATA;
#define etpu_if_GLOBAL_DATA_EXPECTED_SIZE 4


/* data structure (map) of all non-24-bit I2C_slave CHANNEL FRAME data */
/* unnamed bit-fields are used to fill any gaps in the data map */
/* bitfield access generates read-modify-write code (non-coherent), */
/* so if this is an issue, access bitfields via their unit instead. */
typedef struct
{
	/* 0x0000 */
	etpu_if_uint32 : 32;
	/* 0x0004 */
	etpu_if_uint8				_address;
	etpu_if_uint8 : 8;
	etpu_if_uint8 : 8;
	etpu_if_uint8 : 8;
	/* 0x0008 */
	etpu_if_uint8				_address_mask;
	etpu_if_uint8 : 8;
	etpu_if_uint8 : 8;
	etpu_if_uint8 : 8;
	/* 0x000c */
	etpu_if_uint8				_error_flags;
	etpu_if_uint8 : 8;
	etpu_if_uint8 : 8;
	etpu_if_uint8 : 8;
	/* 0x0010 */
	etpu_if_uint8				_latched_error_flags;
	etpu_if_uint8 : 8;
	etpu_if_uint8 : 8;
	etpu_if_uint8 : 8;
	/* 0x0014 */
	etpu_if_uint32 : 32;
	/* 0x0018 */
	etpu_if_uint32 : 32;
	/* 0x001c */
	etpu_if_uint32 : 32;
	/* 0x0020 */
	etpu_if_uint32 : 32;
	/* 0x0024 */
	etpu_if_uint32 : 32;
	/* 0x0028 */
	etpu_if_uint32 : 32;
	/* 0x002c */
	etpu_if_uint32 : 32;
	/* 0x0030 */
	etpu_if_uint32 : 32;
	/* 0x0034 */
	etpu_if_uint32 : 32;
	/* 0x0038 */
	etpu_if_uint32 : 32;
	/* 0x003c */
	etpu_if_uint32 : 32;
} etpu_if_I2C_slave_CHANNEL_FRAME;
#define etpu_if_I2C_slave_CHANNEL_FRAME_EXPECTED_SIZE 64


/* data structure of all 24-bit I2C_slave CHANNEL FRAME data (meant to be accessed via PSE mirror)*/
/* unnamed bit-fields are used to fill any gaps in the data map */
/* bitfield access generates read-modify-write code (non-coherent), */
/* so if this is an issue, access bitfields via their unit instead. */
/* NOTE: it is recommended that 24-bit data be accessed via the separate */
/* signed and unsigned PSE data structures.  Unsigned 24-bit reads must have */
/* the upper 8 bits of the resulting 32-bit word ANDed to 0. */
typedef struct
{
	/* 0x0000 */
	etpu_if_uint32 : 32;
	/* 0x0004 */
	etpu_if_uint32 : 32;
	/* 0x0008 */
	etpu_if_uint32 : 32;
	/* 0x000c */
	etpu_if_uint32 : 32;
	/* 0x0010 */
	etpu_if_uint32 : 32;
	/* 0x0014 */
	etpu_if_uint32 : 32;
	/* 0x0018 */
	etpu_if_uint32 : 32;
	/* 0x001c */
	etpu_if_uint32				_accept_general_call;
	/* 0x0020 */
	etpu_if_uint32				_read_buffer_size;
	/* 0x0024 */
	etpu_if_uint32				_write_buffer_size;
	/* 0x0028 */
	etpu_if_uint32				_read_buffer;
	/* 0x002c */
	etpu_if_uint32				_write_buffer;
	/* 0x0030 */
	etpu_if_uint32				_tSU_DAT;
	/* 0x0034 */
	etpu_if_uint32				_tBUF;
	/* 0x0038 */
	etpu_if_uint32				_header;
	/* 0x003c */
	etpu_if_uint32				_byte_cnt;
} etpu_if_I2C_slave_CHANNEL_FRAME_PSE;
#define etpu_if_I2C_slave_CHANNEL_FRAME_PSE_EXPECTED_SIZE 64


/* data structure of all unsigned 24-bit I2C_slave CHANNEL FRAME data (meant to be accessed via PSE mirror)*/
/* unnamed bit-fields are used to fill any gaps in the data map */
/* bitfield access generates read-modify-write code (non-coherent), */
/* so if this is an issue, access bitfields via their unit instead. */
/* NOTE: when an unsigned 24-bit parameter is read via the PSE (as an */
/* unsigned 32-bit integer), the upper 8 bits must be ANDed off to undo */
/* any potential sign extension. */
typedef struct
{
	/* 0x0000 */
	etpu_if_uint32 : 32;
	/* 0x0004 */
	etpu_if_uint32 : 32;
	/* 0x0008 */
	etpu_if_uint32 : 32;
	/* 0x000c */
	etpu_if_uint32 : 32;
	/* 0x0010 */
	etpu_if_uint32 : 32;
	/* 0x0014 */
	etpu_if_uint32 : 32;
	/* 0x0018 */
	etpu_if_uint32 : 32;
	/* 0x001c */
	etpu_if_uint32				_accept_general_call;
	/* 0x0020 */
	etpu_if_uint32				_read_buffer_size;
	/* 0x0024 */
	etpu_if_uint32				_write_buffer_size;
	/* 0x0028 */
	etpu_if_uint32				_read_buffer;
	/* 0x002c */
	etpu_if_uint32				_write_buffer;
	/* 0x0030 */
	etpu_if_uint32				_tSU_DAT;
	/* 0x0034 */
	etpu_if_uint32				_tBUF;
	/* 0x0038 */
	etpu_if_uint32				_header;
	/* 0x003c */
	etpu_if_uint32				_byte_cnt;
} etpu_if_I2C_slave_CHANNEL_FRAME_unsignedPSE;
#define etpu_if_I2C_slave_CHANNEL_FRAME_unsignedPSE_EXPECTED_SIZE 64


/* data structure (map) of all non-24-bit I2C_master CHANNEL FRAME data */
/* unnamed bit-fields are used to fill any gaps in the data map */
/* bitfield access generates read-modify-write code (non-coherent), */
/* so if this is an issue, access bitfields via their unit instead. */
typedef struct
{
	/* 0x0000 */
	etpu_if_uint32 : 32;
	/* 0x0004 */
	etpu_if_uint32 : 32;
	/* 0x0008 */
	etpu_if_uint32 : 32;
	/* 0x000c */
	etpu_if_uint8				_cmd_cnt;
	etpu_if_uint8 : 8;
	etpu_if_uint8 : 8;
	etpu_if_uint8 : 8;
	/* 0x0010 */
	etpu_if_uint8				_in_use_flag;
	etpu_if_uint8 : 8;
	etpu_if_uint8 : 8;
	etpu_if_uint8 : 8;
	/* 0x0014 */
	etpu_if_uint8				_error_flags;
	etpu_if_uint8 : 8;
	etpu_if_uint8 : 8;
	etpu_if_uint8 : 8;
	/* 0x0018 */
	etpu_if_uint8				_latched_error_flags;
	etpu_if_uint8 : 8;
	etpu_if_uint8 : 8;
	etpu_if_uint8 : 8;
	/* 0x001c */
	etpu_if_uint32 : 32;
	/* 0x0020 */
	etpu_if_uint32 : 32;
	/* 0x0024 */
	etpu_if_uint32 : 32;
	/* 0x0028 */
	etpu_if_uint32 : 32;
	/* 0x002c */
	etpu_if_uint32 : 32;
	/* 0x0030 */
	etpu_if_uint32 : 32;
	/* 0x0034 */
	etpu_if_uint32 : 32;
	/* 0x0038 */
	etpu_if_uint32 : 32;
	/* 0x003c */
	etpu_if_uint32 : 32;
} etpu_if_I2C_master_CHANNEL_FRAME;
#define etpu_if_I2C_master_CHANNEL_FRAME_EXPECTED_SIZE 64


/* data structure of all 24-bit I2C_master CHANNEL FRAME data (meant to be accessed via PSE mirror)*/
/* unnamed bit-fields are used to fill any gaps in the data map */
/* bitfield access generates read-modify-write code (non-coherent), */
/* so if this is an issue, access bitfields via their unit instead. */
/* NOTE: it is recommended that 24-bit data be accessed via the separate */
/* signed and unsigned PSE data structures.  Unsigned 24-bit reads must have */
/* the upper 8 bits of the resulting 32-bit word ANDed to 0. */
typedef struct
{
	/* 0x0000 */
	etpu_if_uint32 : 32;
	/* 0x0004 */
	etpu_if_uint32 : 32;
	/* 0x0008 */
	etpu_if_uint32 : 32;
	/* 0x000c */
	etpu_if_uint32 : 32;
	/* 0x0010 */
	etpu_if_uint32 : 32;
	/* 0x0014 */
	etpu_if_uint32 : 32;
	/* 0x0018 */
	etpu_if_uint32 : 32;
	/* 0x001c */
	etpu_if_uint32 : 32;
	/* 0x0020 */
	etpu_if_uint32				_tLOW;
	/* 0x0024 */
	etpu_if_uint32				_tHIGH;
	/* 0x0028 */
	etpu_if_uint32				_tBUF;
	/* 0x002c */
	etpu_if_uint32				_tSU_STA;
	/* 0x0030 */
	etpu_if_uint32				_tSU_STO;
	/* 0x0034 */
	etpu_if_uint32				_tHD_DAT;
	/* 0x0038 */
	etpu_if_uint32				_tr_max;
	/* 0x003c */
	etpu_if_uint32				_p_cmd_list;
} etpu_if_I2C_master_CHANNEL_FRAME_PSE;
#define etpu_if_I2C_master_CHANNEL_FRAME_PSE_EXPECTED_SIZE 64


/* data structure of all unsigned 24-bit I2C_master CHANNEL FRAME data (meant to be accessed via PSE mirror)*/
/* unnamed bit-fields are used to fill any gaps in the data map */
/* bitfield access generates read-modify-write code (non-coherent), */
/* so if this is an issue, access bitfields via their unit instead. */
/* NOTE: when an unsigned 24-bit parameter is read via the PSE (as an */
/* unsigned 32-bit integer), the upper 8 bits must be ANDed off to undo */
/* any potential sign extension. */
typedef struct
{
	/* 0x0000 */
	etpu_if_uint32 : 32;
	/* 0x0004 */
	etpu_if_uint32 : 32;
	/* 0x0008 */
	etpu_if_uint32 : 32;
	/* 0x000c */
	etpu_if_uint32 : 32;
	/* 0x0010 */
	etpu_if_uint32 : 32;
	/* 0x0014 */
	etpu_if_uint32 : 32;
	/* 0x0018 */
	etpu_if_uint32 : 32;
	/* 0x001c */
	etpu_if_uint32 : 32;
	/* 0x0020 */
	etpu_if_uint32				_tLOW;
	/* 0x0024 */
	etpu_if_uint32				_tHIGH;
	/* 0x0028 */
	etpu_if_uint32				_tBUF;
	/* 0x002c */
	etpu_if_uint32				_tSU_STA;
	/* 0x0030 */
	etpu_if_uint32				_tSU_STO;
	/* 0x0034 */
	etpu_if_uint32				_tHD_DAT;
	/* 0x0038 */
	etpu_if_uint32				_tr_max;
	/* 0x003c */
	etpu_if_uint32				_p_cmd_list;
} etpu_if_I2C_master_CHANNEL_FRAME_unsignedPSE;
#define etpu_if_I2C_master_CHANNEL_FRAME_unsignedPSE_EXPECTED_SIZE 64


#endif /* __etpu_set_struct_H */
